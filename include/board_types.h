/*
  cxNES - NES/Famicom Emulator
  Copyright (C) 2011-2016 Ryan Jackson

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation.; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#ifndef _BOARD_TYPES_H_
#define _BOARD_TYPES_H_

/*
  Most board types are defined as follows:

  Bits  0-11: NES 2.0 mapper number
  Bits 12-15: NES 2.0 submapper number
  Bits 16-19: NES 2.0 VS. "protection" field
  Bits 20-30: misc data
  Bit     31: indicates type is based on NES 2.0 header fields if 1

  Bits 20-30 (misc data) are currently used to differentiate between
  board types that have the same mapper, submapper, and protection
  fields (like SNROM, SOROM, SUROM, SXROM, for example).  This value
  is completely arbitrary, but as it is only used internally to the
  emulator this doesn't really matter.

  The mapper/submapper/protection values are used so that the mapping
  to a particular board type isn't arbitrary (at least no more so than
  the mapper numbers themselves) and makes finding the correct board
  type for iNES roms (the common case) possible without any additional
  lookup tables or code.

  If bit 31 is 0, then bits 0-30 are all arbitrarily defined.  This is
  useful for board types which do not (yet) have an NES 2.0 mapper.
  For example, some of the more obscure Asian and pirate ROMs which
  only exist as UNIF dumps (as of 2015).
*/

#define NON_INES_TYPE_FLAG (1 << 30)

#define INES_TO_BOARD_TYPE(m, s, c, x) ((m) | ((s) << 12) |	\
					(((c) << 16)) | \
					(((x) << 20)))

#define BOARD_TYPE_IS_INES(t)  !((t) & NON_INES_TYPE_FLAG)
#define	BOARD_TYPE_TO_INES_MAPPER(t)  ((t) & 0xfff)
#define	BOARD_TYPE_TO_INES_SUBMAPPER(t)  (((t) & 0xf000) >> 12)
#define	BOARD_TYPE_TO_INES_VS_PROTECTION(t)  (((t) & 0xf0000) >> 16)
#define	BOARD_TYPE_TO_INES_EXTRA(t)  (((t) & 0x7ff00000) >> 4)

enum board_type {
	BOARD_TYPE_UNKNOWN = ~0,

/* Active Enterprises, Ltd. */
	BOARD_TYPE_ACTION_52 = 228,

/* American Video Entertainment (AVE) boards */
	BOARD_TYPE_NINA_001 = INES_TO_BOARD_TYPE( 34,  1, 0, 0),
	BOARD_TYPE_NINA_03_06 = 113,
	BOARD_TYPE_AGCI_50282 = 144,
	BOARD_TYPE_MAXI_15 = 234,

/* Bandai */
	BOARD_TYPE_BANDAI_FCG_COMPAT = 16,
	BOARD_TYPE_BANDAI_FCG = INES_TO_BOARD_TYPE( 16,  0, 0, 1),
	BOARD_TYPE_BANDAI_LZ93D50 = INES_TO_BOARD_TYPE( 16,  0, 0, 2),
	BOARD_TYPE_BANDAI_LZ93D50_24C01 = 159,
	BOARD_TYPE_BANDAI_LZ93D50_24C02 = INES_TO_BOARD_TYPE( 16,  0, 0, 3),
	BOARD_TYPE_BANDAI_JUMP2 = 153,
	BOARD_TYPE_BANDAI_OEKAKIDS = 96,

/* Camerica */
	BOARD_TYPE_CAMERICA_BF9093 = 71,
	BOARD_TYPE_CAMERICA_BF9097 = INES_TO_BOARD_TYPE( 71,  1, 0, 0),
	BOARD_TYPE_CAMERICA_GOLDENFIVE = 104,
	BOARD_TYPE_CAMERICA_BF9096 = 232,
	BOARD_TYPE_CAMERICA_ALADDIN = INES_TO_BOARD_TYPE(232,  1, 0, 0),

/* Homebrew boards */
	BOARD_TYPE_SINGLECHIP = 218,
	BOARD_TYPE_MLT_ACTION53 = 28,
	BOARD_TYPE_UNROM_512	 = 30,
	BOARD_TYPE_UNROM_512_8	 = INES_TO_BOARD_TYPE( 30,  0, 0, 2),
	BOARD_TYPE_UNROM_512_16	 = INES_TO_BOARD_TYPE( 30,  0, 0, 3),
	BOARD_TYPE_UNROM_512_32	 = INES_TO_BOARD_TYPE( 30,  0, 0, 4),
	BOARD_TYPE_UNROM_512_FLASH = INES_TO_BOARD_TYPE( 30,  0, 0, 1),
	BOARD_TYPE_INLNSF = 31,

/* Irem */
	BOARD_TYPE_IREM_TAM_S1 = 97,
	BOARD_TYPE_IREM_H3001 = 65,
	BOARD_TYPE_IREM_G101 = 32,
	BOARD_TYPE_IREM_G101_B = INES_TO_BOARD_TYPE( 32,  1, 0, 0),
	BOARD_TYPE_IREM_74x161_161_21_138 = 77,
	BOARD_TYPE_IREM_HOLY_DIVER = INES_TO_BOARD_TYPE( 78,  3, 0, 0),

/* Jaleco */
	BOARD_TYPE_JALECO_JF13 = 86,
	BOARD_TYPE_JALECO_JF14 = 140,
	BOARD_TYPE_JALECO_SS88006 = 18,
	BOARD_TYPE_JALECO_JF16 = INES_TO_BOARD_TYPE( 78,  1, 0, 0),
	BOARD_TYPE_JALECO_JF17 = INES_TO_BOARD_TYPE( 72,  1, 0, 0),
	BOARD_TYPE_JALECO_JF19 = INES_TO_BOARD_TYPE( 92,  1, 0, 0),

/* Konami */
	BOARD_TYPE_VRC1 = 75,
	BOARD_TYPE_VRC2A = 22,
	BOARD_TYPE_VRC2B = INES_TO_BOARD_TYPE( 23,  3, 0, 0),
	BOARD_TYPE_VRC2C = INES_TO_BOARD_TYPE( 25,  3, 0, 0),
	BOARD_TYPE_VRC3 = 73,
	BOARD_TYPE_VRC4A = INES_TO_BOARD_TYPE( 21,  1, 0, 0),
	BOARD_TYPE_VRC4B = INES_TO_BOARD_TYPE( 25,  1, 0, 0),
	BOARD_TYPE_VRC4C = INES_TO_BOARD_TYPE( 21,  2, 0, 0),
	BOARD_TYPE_VRC4D = INES_TO_BOARD_TYPE( 25,  2, 0, 0),
	BOARD_TYPE_VRC4E = INES_TO_BOARD_TYPE( 23,  2, 0, 0),
	BOARD_TYPE_VRC4F = INES_TO_BOARD_TYPE( 23,  1, 0, 0),
	BOARD_TYPE_VRC4E_COMPAT = 23,
	BOARD_TYPE_VRC4AC = 21,
	BOARD_TYPE_VRC4BD = 25,
	BOARD_TYPE_VRC6A = 24,
	BOARD_TYPE_VRC6B = 26,
	BOARD_TYPE_VRC7_COMPAT = 85,
	BOARD_TYPE_VRC7A = INES_TO_BOARD_TYPE( 85,  0, 0, 1),
	BOARD_TYPE_VRC7B = INES_TO_BOARD_TYPE( 85,  0, 0, 2),

/* Namco */
	BOARD_TYPE_NAMCO_163 = 19,
	BOARD_TYPE_NAMCO_340_COMPAT = 210,
	BOARD_TYPE_NAMCO_340 = INES_TO_BOARD_TYPE(210,  2, 0, 0),
	BOARD_TYPE_NAMCO_175 = INES_TO_BOARD_TYPE(210,  1, 0, 0),
	BOARD_TYPE_NAMCO_108 = 206,
	BOARD_TYPE_DRROM = INES_TO_BOARD_TYPE(206,  0, 0, 1),
	BOARD_TYPE_NAMCO_3446 = 76,
	BOARD_TYPE_NAMCO_3433 = 88,
	BOARD_TYPE_NAMCO_3453 = 154,
	BOARD_TYPE_NAMCO_3425 = 95,
	BOARD_TYPE_NAMCO_CNROM_WRAM = INES_TO_BOARD_TYPE(  3,  0, 0, 1),

/* Nintendo-made boards (and variants) */
	BOARD_TYPE_AxROM = 7,
	BOARD_TYPE_BNROM = INES_TO_BOARD_TYPE( 34,  2, 0, 0),
	BOARD_TYPE_CNROM = 3,
	BOARD_TYPE_CNROM_NO_CONFLICT = INES_TO_BOARD_TYPE(  3,  1, 0, 0),
	BOARD_TYPE_CPROM = 13,
	BOARD_TYPE_ExROM = 5,
	BOARD_TYPE_EKROM = INES_TO_BOARD_TYPE(  5,  0, 0, 2),
	BOARD_TYPE_ETROM = INES_TO_BOARD_TYPE(  5,  0, 0, 3),
	BOARD_TYPE_EWROM = INES_TO_BOARD_TYPE(  5,  0, 0, 4),
	BOARD_TYPE_ExROM_COMPAT = INES_TO_BOARD_TYPE(  5,  0, 0, 1),
	BOARD_TYPE_FxROM = 10,
	BOARD_TYPE_FxROM_WRAM = INES_TO_BOARD_TYPE( 10,  0, 0, 1),
	BOARD_TYPE_FAMILYBASIC = INES_TO_BOARD_TYPE(  0,  0, 0, 1),
	BOARD_TYPE_GxROM = 66,
	BOARD_TYPE_HROM = INES_TO_BOARD_TYPE(  0,  0, 0, 3),
	BOARD_TYPE_HKROM = INES_TO_BOARD_TYPE(  4,  1, 0, 0),
	BOARD_TYPE_NROM = 0,
	BOARD_TYPE_NROM368 = INES_TO_BOARD_TYPE(  0,  0, 0, 2),
	BOARD_TYPE_PxROM = INES_TO_BOARD_TYPE(  9,  0, 0, 0),
	BOARD_TYPE_SxROM = INES_TO_BOARD_TYPE(  1,  0, 0, 0),
	BOARD_TYPE_SxROM_MMC1A = 155,
	BOARD_TYPE_SNROM = INES_TO_BOARD_TYPE(  1,  0, 0, 1),
	BOARD_TYPE_SOROM = INES_TO_BOARD_TYPE(  1,  2, 0, 0),
	BOARD_TYPE_SUROM = INES_TO_BOARD_TYPE(  1,  1, 0, 0),
	BOARD_TYPE_SXROM = INES_TO_BOARD_TYPE(  1,  4, 0, 0),
	BOARD_TYPE_SEROM_SHROM = INES_TO_BOARD_TYPE(  1,  5, 0, 0),
	BOARD_TYPE_SxROM_COMPAT = INES_TO_BOARD_TYPE(  1,  0, 0, 7),
	BOARD_TYPE_SxROM_WRAM = INES_TO_BOARD_TYPE(  1,  0, 0, 6),
	BOARD_TYPE_TxROM = 4,
	BOARD_TYPE_TxROM_COMPAT = INES_TO_BOARD_TYPE(  4,  0, 0, 3),
	BOARD_TYPE_TxROM_WRAM = INES_TO_BOARD_TYPE(  4,  0, 0, 1),
	BOARD_TYPE_TVROM = INES_TO_BOARD_TYPE(  4,  0, 0, 2),
	BOARD_TYPE_ACCLAIM_MC_ACC = INES_TO_BOARD_TYPE(  4,  3, 0, 0),
	BOARD_TYPE_TxROM_MMC3A = INES_TO_BOARD_TYPE(  4,  4, 0, 0),
	BOARD_TYPE_TxSROM = 118,
	BOARD_TYPE_TQROM = 119,
	BOARD_TYPE_UxROM = 2,
	BOARD_TYPE_UxROM_PC_PROWRESTLING = INES_TO_BOARD_TYPE(  2,  0, 0, 1),
	BOARD_TYPE_UxROM_NO_CONFLICT = INES_TO_BOARD_TYPE(  2,  1, 0, 0),
	BOARD_TYPE_UN1ROM = 94,
	BOARD_TYPE_UNROM_74HC08 = 180,
	BOARD_TYPE_QJ = 47,
	BOARD_TYPE_ZZ = 37,
	BOARD_TYPE_SECURITY_CNROM = 185,
	BOARD_TYPE_SECURITY_CNROM_BANK0 = INES_TO_BOARD_TYPE(185,  4, 0, 0),
	BOARD_TYPE_SECURITY_CNROM_BANK1 = INES_TO_BOARD_TYPE(185,  5, 0, 0),
	BOARD_TYPE_SECURITY_CNROM_BANK2 = INES_TO_BOARD_TYPE(185,  6, 0, 0),
	BOARD_TYPE_SECURITY_CNROM_BANK3 = INES_TO_BOARD_TYPE(185,  7, 0, 0),
	BOARD_TYPE_EVENT	 = 105,

/* Sachen */
	BOARD_TYPE_SACHEN_TCU01 = 147,
	BOARD_TYPE_SACHEN_SA0036 = 149,
	BOARD_TYPE_SACHEN_SA0037 = 148,
	BOARD_TYPE_SACHEN_8259A = 141,
	BOARD_TYPE_SACHEN_8259B = 138,
	BOARD_TYPE_SACHEN_8259C = 139,
	BOARD_TYPE_SACHEN_8259D = 137,
	BOARD_TYPE_SACHEN_NROM = 143,
	BOARD_TYPE_SACHEN_72008 = 133,
	BOARD_TYPE_SACHEN_72007 = 145,
	BOARD_TYPE_SACHEN_74LS374N = 150,
	BOARD_TYPE_SACHEN_74LS374N_A = 243,

/* Sunsoft */
	BOARD_TYPE_SUNSOFT1 = 184,
	BOARD_TYPE_SUNSOFT2 = 89,
	BOARD_TYPE_SUNSOFT3R = 93,
	BOARD_TYPE_SUNSOFT2_2_3R = INES_TO_BOARD_TYPE( 93,  0, 0, 1),
	BOARD_TYPE_SUNSOFT3 = 67,
	BOARD_TYPE_SUNSOFT4 = 68,
	BOARD_TYPE_SUNSOFT5B = 69,

/* Taito */
	BOARD_TYPE_TAITO_TC0190FMC_PAL16R4 = 48,
	BOARD_TYPE_TAITO_TC0190FMC = 33,
	BOARD_TYPE_TAITO_X1_017		 = 82,
	BOARD_TYPE_TAITO_X1_005		 = 80,
	BOARD_TYPE_TAITO_X1_005_ALT	 = 207,

/* Tengen */
	BOARD_TYPE_TENGEN_800032 = 64,
	BOARD_TYPE_TENGEN_800037 = 158,
	BOARD_TYPE_TENGEN_800004 = 206,

/* Wisdom Tree */		
	BOARD_TYPE_RUMBLESTATION = 46,

/* Waixing */
	BOARD_TYPE_WAIXING_TYPE_A = 74,
	BOARD_TYPE_WAIXING_TYPE_C = 192,
	BOARD_TYPE_WAIXING_TYPE_H = 245,
	BOARD_TYPE_WAIXING_SGZLZ = 178,
	BOARD_TYPE_WAIXING_PS2 = 15,

/* JY Company */
	BOARD_TYPE_JYCOMPANY_A = 90,
	BOARD_TYPE_JYCOMPANY_B = 209,
	BOARD_TYPE_JYCOMPANY_C = 211,

/* Kasing */
	BOARD_TYPE_KASING = 115,

/* VS. Unisystem games */
	BOARD_TYPE_VS_UNISYSTEM = 99,
	BOARD_TYPE_VS_PINBALL = INES_TO_BOARD_TYPE( 99,  0, 0, 1),
	BOARD_TYPE_VS_PINBALLJ = INES_TO_BOARD_TYPE( 99,  0, 0, 2),
	BOARD_TYPE_VS_GUMSHOE = INES_TO_BOARD_TYPE( 99,  0, 0, 3),
	BOARD_TYPE_VS_RBI_BASEBALL = INES_TO_BOARD_TYPE(206,  0, 1, 0),
	BOARD_TYPE_VS_TKO_BOXING = INES_TO_BOARD_TYPE(206,  0, 2, 0),
	BOARD_TYPE_VS_SUPER_XEVIOUS = INES_TO_BOARD_TYPE(206,  0, 3, 0),

	BOARD_TYPE_FDS = 0x1fffe | NON_INES_TYPE_FLAG,
	BOARD_TYPE_NSF = 0x1ffff | NON_INES_TYPE_FLAG,

	BOARD_TYPE_CALTRON_6_IN_1 = 41,
	BOARD_TYPE_NTDEC_193 = 193,
	BOARD_TYPE_COLORDREAMS = 11,
	BOARD_TYPE_74x161_161_32 = 70,
	BOARD_TYPE_74x139_74 = 87,
	BOARD_TYPE_PCI556 = 38,

/* Some boards can't be easily identified by their board names or
   components since we don't necessarily have that info.  These we
   just identify by the iNES mapper number.
*/
	BOARD_TYPE_BMC_20_IN_1 = 231,
	BOARD_TYPE_NTDEC_112	 = 	   112,
	BOARD_TYPE_INES201 = 201,
	BOARD_TYPE_BMC_110_IN_1 = 255,
	BOARD_TYPE_BMC_MARIOPARTY_7_IN_1 = 52,
	BOARD_TYPE_INES36 = 36,
	BOARD_TYPE_BMC_N625092 = 221,
	BOARD_TYPE_BMC_1200_IN_1 = 200,
	BOARD_TYPE_BMC_15_IN_1 = 205,
	BOARD_TYPE_22_IN_1 = 230,
	BOARD_TYPE_BMC_35_IN_1 = 203,
	BOARD_TYPE_BMC_SUPERBIG_7_IN_1 = 44,
	BOARD_TYPE_BMC_SUPERHIK_4_IN_1 = 49,
	BOARD_TYPE_BMC_SUPERHIK_8_IN_1 = 45,
	BOARD_TYPE_GAMESTAR_B = 58,
	BOARD_TYPE_BMC_SUPER700IN1 = 62,
	BOARD_TYPE_UNL_MORTALKOMBAT2 = 91,
	BOARD_TYPE_BTL_SMB2A = 40,
	BOARD_TYPE_BTL_SMB2B = 50,
	BOARD_TYPE_BTL_SMB2C = 43,
	BOARD_TYPE_BTL_SUPERBROS11 = 196,
	BOARD_TYPE_WHIRLWIND_2706 = 108,
	BOARD_TYPE_UNL_TXC_22211B = 172,
	BOARD_TYPE_UNL_TXC_22211A = 132,
	BOARD_TYPE_CNE_DECATHLON = 244,
	BOARD_TYPE_UNL_LH32 = 0x1e000 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_UNL_BB = 0x1e001 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_UNL_SMB2J = 0x1e002 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_UNL_AC08 = 0x1e003 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_UNL_CC_21 = 0x1e004 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_UNL_KS7031 = 0x1e007 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_UNL_KS7037 = 0x1e005 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_UNL_KS7057 = 0x1e006 | NON_INES_TYPE_FLAG,
	BOARD_TYPE_MAGICSERIES = 107,
	BOARD_TYPE_BMC_150_IN_1 = 202,
	BOARD_TYPE_76_IN_1 = 226,
	BOARD_TYPE_SUBOR_BOARD_1 = 166,
	BOARD_TYPE_SUBOR_BOARD_0 = 167,
	BOARD_TYPE_RCM_GS2015 = 216,
	BOARD_TYPE_RCM_TETRISFAMILY = 61,

	BOARD_TYPE_CNE_SHLZ = 240,
	BOARD_TYPE_TXC_TW = 189,
	BOARD_TYPE_CNE_PSB = 246,
	BOARD_TYPE_UNL_HOSENKAN = 182,
	BOARD_TYPE_RESETBASED_4_IN_1 = 60,

	BOARD_TYPE_RETROUSB_CUFROM = 29,

	BOARD_TYPE_MAGIC_KID_GOOGOO = 190,

/* These are handled internally to the iNES ROM loader because they're
   essentially duplicates or subsets of other mappers.  They're listed
   here so that I can automate extracting the list of supported mappers
   from this file and not need to account for these by hand.

	BOARD_TYPE_INES_39 = 39,
	BOARD_TYPE_INES_79 = 79,
	BOARD_TYPE_INES_146 = 146,
	BOARD_TYPE_INES_151 = 151,
	BOARD_TYPE_INES_152 = 152,
	BOARD_TYPE_INES_225 = 225,
	BOARD_TYPE_INES_241 = 241,
*/
};

#endif				/* _BOARD_TYPES_H_ */
